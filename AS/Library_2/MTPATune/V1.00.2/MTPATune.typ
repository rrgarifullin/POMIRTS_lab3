
TYPE
	MTPATuneFFParametersType : 	STRUCT  (*Finite Frequency Parameters*)
		ControllerType : MTPATuneControllerEnum; (*Type of Controller (PI or PID)*)
		MaxAmplitude : REAL; (*The max value of test signal (applied direct to the plant)*)
		MaxTimeConstant : REAL; (*The biggest plant time constant or plant transient duration*)
		SystemSettlingTime : REAL; (*The desired plant settling time*)
		PhaseMargin : REAL; (*The desired system phase margin*)
		MinOut : REAL; (*Lower manipulated variable limit (lower modulation limit of the subsequent actuator). Permitted range of values: MinOut < MaxOut.*)
		MaxOut : REAL; (*Upper manipulated variable limit (upper modulation limit of the subsequent actuator). Permitted range of values: MaxOut > MinOut.*)
	END_STRUCT;
	MTPATunePIDParametersType : 	STRUCT  (*PID controller Parameters*)
		Gain : REAL; (*Proportional gain. Valid value range: Gain > 0.*)
		IntegrationTime : REAL; (*Integral time constant for the integral component. Unit: [s]. Valid value range: IntegrationTime >= 0.*)
		DerivativeTime : REAL; (*Differential time constant for the derivative component. Unit: [s]. Valid value range: DerivativeTime >= 0.*)
		FilterTime : REAL; (*Filter time constant for the derivative component. Unit: [s]. Valid value range: FilterTime >= 0.*)
		DerivativeGain : REAL; (*Derivative Gain for the derivative component as function of Differential time and Filter time . Unit: [no unit]. Valid value range: FilterTime >= 0.*)
	END_STRUCT;
	MTPATuneFFInternalType : 	STRUCT  (*Data for internal use.*)
		Parameters : MTPATuneFFParametersType; (*Data for internal use.*)
		PIDSelect : BOOL; (*Data for internal use.*)
		RecalculatePIDOld : BOOL; (*Data for internal use.*)
		ParametersValid : BOOL; (*Data for internal use.*)
		Offset : REAL; (*Offset which is used during active tuning procedure.*)
		Error : BOOL; (*Data for internal use.*)
		Warning : BOOL; (*Data for internal use.*)
		UpdateOld : BOOL; (*Data for internal use.*)
		EnableOld : BOOL; (*Data for internal use.*)
		nErrorRegister : UINT; (*Data for internal use.*)
		StartOld : BOOL; (*Data for internal use.*)
		dTuningProgress : REAL; (*Tuning progress in %*)
		dOmegaFilterProgress : REAL; (*Current omega filtering progress in %*)
		dBetaHigh : REAL; (*Data for internal use.*)
		dAlphaHigh : REAL; (*Data for internal use.*)
		dOmegaHigh : REAL; (*Data for internal use.*)
		dBetaLow : REAL; (*Data for internal use.*)
		dAlphaLow : REAL; (*Data for internal use.*)
		dOmegaLow : REAL; (*Data for internal use.*)
		pdBetaPlantOld : ARRAY[0..1]OF REAL; (*Data for internal use.*)
		pdBetaPlant : ARRAY[0..1]OF REAL; (*Data for internal use.*)
		pdAlphaPlantOld : ARRAY[0..1]OF REAL; (*Data for internal use.*)
		pdAlphaPlant : ARRAY[0..1]OF REAL; (*Data for internal use.*)
		pdBetaY : ARRAY[0..1]OF REAL; (*Data for internal use.*)
		pdBetaU : ARRAY[0..1]OF REAL; (*Data for internal use.*)
		pdAlphaY : ARRAY[0..1]OF REAL; (*Data for internal use.*)
		pdAlphaU : ARRAY[0..1]OF REAL; (*Data for internal use.*)
		pdAmpl : ARRAY[0..1]OF REAL; (*Data for internal use.*)
		nArrayCount : USINT; (*Data for internal use.*)
		pdOmegaArray : ARRAY[0..10]OF REAL; (*Data for internal use.*)
		pdBetaArray : ARRAY[0..10]OF REAL; (*Data for internal use.*)
		pdAlphaArray : ARRAY[0..10]OF REAL; (*Data for internal use.*)
		pdOmega : ARRAY[0..1]OF REAL; (*Data for internal use.*)
		dTime : REAL; (*Data for internal use.*)
		timeCURRENT : TIME; (*Data for internal use.*)
		timeINIT : TIME; (*Data for internal use.*)
		dIteration : REAL; (*Data for internal use.*)
		nCalc : BYTE; (*Data for internal use.*)
		nCount : INT; (*Data for internal use.*)
		nPeriodSize : INT; (*Data for internal use.*)
		nPeriodNum : INT; (*Data for internal use.*)
		nPeriodMax : INT; (*Data for internal use.*)
		nPlantOrder : USINT; (*Data for internal use.*)
		dCycleTime : REAL; (*Data for internal use.*)
		byTunerStatus : BYTE; (*Data for internal use.*)
	END_STRUCT;
	MTPATuneControllerEnum : 
		( (*Controller Type*)
		mtPAT_PI_Controller := 0, (*PI controller *)
		mtPAT_PID_Controller := 1 (*PID controller*)
		);
END_TYPE
